---
# Source: okteto-enterprise/templates/permissive-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: "do-okteto-enterprise-permissive"
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-permissive"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  privileged: true
  hostNetwork: true
  allowPrivilegeEscalation: true
  defaultAllowPrivilegeEscalation: true
  hostPID: true
  hostIPC: true
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  hostPorts:
  - min: 0
    max: 65535
  volumes:
  - '*'
  allowedCapabilities:
  - '*'
---
# Source: okteto-enterprise/templates/restrictive-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: "do-okteto-enterprise-restrictive"
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-restrictive"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  privileged: false
  hostNetwork: false
  allowPrivilegeEscalation: false
  defaultAllowPrivilegeEscalation: false
  hostPID: false
  hostIPC: false
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  allowedHostPaths:
    - pathPrefix: "/var/okteto/bin"
      readOnly: true
  volumes:
  - hostPath
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - secret
  - projected
  allowedCapabilities:
  - '*'

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-poddisruptionbudget.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    component: "controller"
    heritage: Tiller
    release: do
  name: do-nginx-ingress-controller
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: do
      component: "controller"
  minAvailable: 1

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-poddisruptionbudget.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    component: "default-backend"
    heritage: Tiller
    release: do
  name: do-nginx-ingress-default-backend
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: do
      component: "default-backend"
  minAvailable: 1

---
# Source: okteto-enterprise/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: do-okteto-enterprise
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-secret"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/component: "api"
    app.kubernetes.io/part-of: "okteto"
type: Opaque
data:
  license: ""
  githubClientSecret: ""

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    component: "controller"
    heritage: Tiller
    release: do
  name: do-nginx-ingress-controller
data:
  custom-http-errors: 502,503
  enable-underscores-in-headers: "true"
  ignore-invalid-headers: "false"
  

---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-cert-manager-cainjector
  namespace: "okteto"
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0

---
# Source: okteto-enterprise/charts/cert-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-cert-manager
  namespace: "okteto"
  annotations:
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0

---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-cert-manager-webhook
  namespace: "okteto"
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    heritage: Tiller
    release: do
  name: do-nginx-ingress
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    heritage: Tiller
    release: do
  name: do-nginx-ingress-backend

---
# Source: okteto-enterprise/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-okteto-enterprise
  labels:
    app: do-okteto-enterprise
    chart: "okteto-enterprise-0.3.0"
    release: "do"
    heritage: "Tiller"
    
    dev.okteto.com/token: "PLACEHOLDER_VALUE"
    
  annotations:
    dev.okteto.com/super: "true"


---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-cainjector
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "create", "update", "patch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiregistration.k8s.io"]
    resources: ["apiservices"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-cainjector
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-cainjector
subjects:
  - name: do-cert-manager-cainjector
    namespace: "okteto"
    kind: ServiceAccount

---
# leader election rules
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: do-cert-manager-cainjector:leaderelection
  namespace: kube-system
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  # Used for leader election by the controller
  # TODO: refine the permission to *just* the leader election configmap
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "update", "patch"]

---

# grant cert-manager permission to manage the leaderelection configmap in the
# leader election namespace
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: do-cert-manager-cainjector:leaderelection
  namespace: kube-system
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: do-cert-manager-cainjector:leaderelection
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: do-cert-manager-cainjector
    namespace: okteto
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    heritage: Tiller
    release: do
  name: do-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: okteto-enterprise/templates/dev-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-okteto-enterprise-psp
  labels:
    app.kubernetes.io/name: do-okteto-enterprise-psp
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - pods/exec
  - pods/attach
  - pods/portforward
  - configmaps
  - secrets
  - services
  - endpoints
  - events
  - persistentvolumeclaims
  - replicationcontrollers
  verbs:
  - '*'
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - '*'
- apiGroups:
  - extensions
  resources:
  - deployments
  - ingresses
  - replicasets
  verbs:
  - '*'
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - events
  - limitranges
  - namespaces
  - namespaces/status
  - resourcequotas
  - resourcequotas/status
  verbs:
  - get
  - list
- apiGroups:
  - policy
  resourceNames:
  - "do-okteto-enterprise-restrictive"
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
# Source: okteto-enterprise/templates/internal-namespace-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-okteto-enterprise-internal-namespace
  labels:
    app.kubernetes.io/name:  do-okteto-enterprise-internal-namespace
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods/portforward
  verbs:
  - create

---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-rbac.yaml
### Webhook ###
---
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-webhook:auth-delegator
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: do-cert-manager-webhook
  namespace: okteto

---

# apiserver gets the ability to read authentication. This allows it to
# read the specific configmap that has the requestheader-* entries to
# api agg
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: do-cert-manager-webhook:webhook-authentication-reader
  namespace: kube-system
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: do-cert-manager-webhook
  namespace: okteto

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-cert-manager-webhook:webhook-requester
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
- apiGroups:
  - admission.cert-manager.io
  resources:
  - certificates
  - certificaterequests
  - issuers
  - clusterissuers
  verbs:
  - create
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    heritage: Tiller
    release: do
  name: do-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: do-nginx-ingress
    namespace: okteto
---
# Source: okteto-enterprise/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-okteto-enterprise-role-binding
  labels:
    app: do-okteto-enterprise
    chart: "okteto-enterprise-0.3.0"
    release: "do"
    heritage: "Tiller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: do-okteto-enterprise
  namespace: okteto
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: do-cert-manager:leaderelection
  namespace: kube-system
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  # Used for leader election by the controller
  # TODO: refine the permission to *just* the leader election configmap
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "update", "patch"]

---

# grant cert-manager permission to manage the leaderelection configmap in the
# leader election namespace
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: do-cert-manager:leaderelection
  namespace: kube-system
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: do-cert-manager:leaderelection
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: do-cert-manager
    namespace: okteto

---

# Issuer controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-issuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "issuers/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---

# ClusterIssuer controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-clusterissuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "clusterissuers/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---

# Certificates controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-certificates
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificates/status", "certificaterequests", "certificaterequests/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates/finalizers", "certificaterequests/finalizers"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders"]
    verbs: ["create", "delete", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---

# Orders controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-orders
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "orders/status"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "challenges"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["create", "delete"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---

# Challenges controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-challenges
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  # Use to update challenge resource status
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "challenges/status"]
    verbs: ["update"]
  # Used to watch challenge resources
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["get", "list", "watch"]
  # Used to watch challenges, issuer and clusterissuer resources
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  # Need to be able to retrieve ACME account private key to complete challenges
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  # Used to create events
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  # HTTP01 rules
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges/finalizers"]
    verbs: ["update"]
  # DNS01 rules (duplicated above)
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]

---

# ingress-shim controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-ingress-shim
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["extensions"]
    resources: ["ingresses/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-issuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-issuers
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-clusterissuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-clusterissuers
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-certificates
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-certificates
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-orders
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-orders
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-challenges
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-challenges
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-ingress-shim
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-ingress-shim
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-cert-manager-view
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-cert-manager-edit
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    heritage: Tiller
    release: do
  name: do-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: okteto-enterprise/templates/psp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "do-okteto-enterprise-internal"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-internal"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
rules:
- apiGroups:
  - policy
  resourceNames:
  - "do-okteto-enterprise-permissive"
  resources:
  - podsecuritypolicies
  verbs:
  - use

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "do-okteto-enterprise-internal"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-internal"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
subjects:
- kind: ServiceAccount
  name: "do-cert-manager"
  namespace: okteto
- kind: ServiceAccount
  name: "do-cert-manager-cainjector"
  namespace: okteto
- kind: ServiceAccount
  name: "do-cert-manager-webhook"
  namespace: okteto
- kind: ServiceAccount
  name: "do-nginx-ingress"
  namespace: okteto
- kind: ServiceAccount
  name: "do-nginx-ingress-backend"
  namespace: okteto
- kind: ServiceAccount
  name: "do-okteto-enterprise"
  namespace: okteto
- kind: ServiceAccount
  name: "default"
  namespace: okteto
roleRef:
  kind: Role
  name: "do-okteto-enterprise-internal"
  apiGroup: rbac.authorization.k8s.io
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    heritage: Tiller
    release: do
  name: do-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: do-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: do-nginx-ingress
    namespace: okteto
---
# Source: okteto-enterprise/charts/cert-manager/templates/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: do-cert-manager
  namespace: "okteto"
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 9402
      targetPort: 9402
  selector:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do

---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: do-cert-manager-webhook
  namespace: "okteto"
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: 10250
  selector:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    component: "controller"
    heritage: Tiller
    release: do
  name: do-nginx-ingress-controller
spec:
  
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: nginx-ingress
    component: "controller"
    release: do
  type: "LoadBalancer"

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-service.yaml

apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    component: "default-backend"
    heritage: Tiller
    release: do
  name: do-nginx-ingress-default-backend
spec:
  
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: nginx-ingress
    component: "default-backend"
    release: do
  type: "ClusterIP"

---
# Source: okteto-enterprise/templates/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-api"
  labels:
    app.kubernetes.io/component: "api"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-api"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-api"
    app.kubernetes.io/instance: do

---
# Source: okteto-enterprise/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-frontend"
  labels:
    app.kubernetes.io/component: "frontend"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-frontend"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: frontend
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-frontend"
    app.kubernetes.io/instance: do

---
# Source: okteto-enterprise/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-mutation-webhook"
  labels:
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 443
      name: webhook
      targetPort: 8443
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    app.kubernetes.io/instance: do

---
# Source: okteto-enterprise/templates/daemon.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: "do-okteto-enterprise-daemon"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-daemon"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/component: "daemon"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-daemon"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-daemon"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "daemon"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        app.kubernetes.io/version: "do-okteto-enterprise-0.3.0"
    spec:
      terminationGracePeriodSeconds: 0
      serviceAccountName: do-okteto-enterprise
      initContainers:
      - name: prepull 
        image: docker:stable
        command: ["docker", "pull", "okteto/helm-installer:1.0.0"]
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
      containers:
        - name: daemon
          image: okteto/bin:1.1.2
          securityContext:
            privileged: true
          command:
            - /bin/sh
            - -c
            - "cp /usr/local/bin/* /var/okteto/bin && echo 10048576 > /proc-aux/sys/fs/inotify/max_user_watches && tail -f /dev/null"
          volumeMounts:
          - mountPath: /proc-aux
            name: proc-volume
          - mountPath: /var/okteto/bin
            name: okteto-bin
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: proc-volume
        hostPath:
          path: /proc
      - name: okteto-bin
        hostPath:
          path: /var/okteto/bin

---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: do-cert-manager-cainjector
  namespace: "okteto"
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cainjector
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/instance: do
      app.kubernetes.io/managed-by: Tiller
  template:
    metadata:
      labels:
        app: cainjector
        app.kubernetes.io/name: cainjector
        app.kubernetes.io/instance: do
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: cert-manager-v0.12.0
      annotations:
    spec:
      serviceAccountName: do-cert-manager-cainjector
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-cainjector:v0.12.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
            

---
# Source: okteto-enterprise/charts/cert-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: do-cert-manager
  namespace: "okteto"
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/instance: do
      app.kubernetes.io/managed-by: Tiller
  template:
    metadata:
      labels:
        app: cert-manager
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/instance: do
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: cert-manager-v0.12.0
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9402'
    spec:
      serviceAccountName: do-cert-manager
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-controller:v0.12.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --webhook-namespace=$(POD_NAMESPACE)
          - --webhook-ca-secret=do-cert-manager-webhook-ca
          - --webhook-serving-secret=do-cert-manager-webhook-tls
          - --webhook-dns-names=do-cert-manager-webhook,do-cert-manager-webhook.okteto,do-cert-manager-webhook.okteto.svc
          ports:
          - containerPort: 9402
            protocol: TCP
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
            

---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: do-cert-manager-webhook
  namespace: "okteto"
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook
      app.kubernetes.io/name: webhook
      app.kubernetes.io/instance: do
      app.kubernetes.io/managed-by: Tiller
  template:
    metadata:
      labels:
        app: webhook
        app.kubernetes.io/name: webhook
        app.kubernetes.io/instance: do
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: cert-manager-v0.12.0
      annotations:
    spec:
      serviceAccountName: do-cert-manager-webhook
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-webhook:v0.12.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --secure-port=10250
          - --tls-cert-file=/certs/tls.crt
          - --tls-private-key-file=/certs/tls.key
          livenessProbe:
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
            
          volumeMounts:
          - name: certs
            mountPath: /certs
      volumes:
      - name: certs
        secret:
          secretName: do-cert-manager-webhook-tls
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    component: "controller"
    heritage: Tiller
    release: do
  name: do-nginx-ingress-controller
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: do
  replicas: 2
  revisionHistoryLimit: 10
  strategy:
    {}
    
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: nginx-ingress
        component: "controller"
        release: do
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: nginx-ingress-controller
          image: "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1"
          imagePullPolicy: "IfNotPresent"
          args:
            - /nginx-ingress-controller
            - --default-backend-service=okteto/do-nginx-ingress-default-backend
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=okteto/do-nginx-ingress-controller
            - --default-ssl-certificate=$(POD_NAMESPACE)/default-ssl-certificate
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 33
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            {}
            
      hostNetwork: false
      serviceAccountName: do-nginx-ingress
      terminationGracePeriodSeconds: 60

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.26.2
    component: "default-backend"
    heritage: Tiller
    release: do
  name: do-nginx-ingress-default-backend
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: do
  replicas: 2
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: nginx-ingress
        component: "default-backend"
        release: do
    spec:
      containers:
        - name: nginx-ingress-default-backend
          image: "okteto/custom-error-pages:0.1.0"
          imagePullPolicy: "IfNotPresent"
          args:
          securityContext:
            runAsUser: 65534
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
            
      serviceAccountName: do-nginx-ingress-backend
      terminationGracePeriodSeconds: 60

---
# Source: okteto-enterprise/templates/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "do-okteto-enterprise-api"
  labels:
    app.kubernetes.io/component: "api"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-api"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-api"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-api"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "api"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        checksum/secrets: b795e3516ab6ef9df3751d2e4a6cdc717433671302a62ea683fe7ef423501e56
    spec:
      serviceAccountName: do-okteto-enterprise
      containers:
        - name: api
          image: "okteto/api:1.5.16"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: OKTETO_APPLICATIONS_REPOSITORY
              value: ""
            - name: OKTETO_BASE_DOMAIN
              value: "local"
            - name: OKTETO_LICENSE
              valueFrom:
                secretKeyRef:
                  name: do-okteto-enterprise
                  key: license
            - name: OKTETO_PUBLIC_URL
              value: "okteto.local"
            - name: OKTETO_INTERNAL_NAMESPACE_CLUSTER_ROLE
              value: "do-okteto-enterprise-internal-namespace"
            - name: OKTETO_DEV_CLUSTER_ROLE
              value: "do-okteto-enterprise-psp"
            - name: OKTETO_MULTITENANCY_HARD
              value: "false"
            - name: CLUSTER_PUBLIC_ENDPOINT
              value: ""
            - name: GITHUB_CLIENTID
              value: 
            - name: OKTETO_GITHUB_WHITELIST
              value: 
            - name: GITHUB_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: do-okteto-enterprise
                  key: githubClientSecret
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 1          
          resources:
            {}
            
---
# Source: okteto-enterprise/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "do-okteto-enterprise-frontend"
  labels:
    app.kubernetes.io/component: "frontend"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-frontend"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-frontend"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-frontend"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "frontend"
        app.kubernetes.io/part-of: "okteto"
    spec:
      serviceAccountName: do-okteto-enterprise
      containers:
        - name: frontend
          image: "okteto/frontend:1.5.16"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: GITHUB_CLIENTID
              value: 
          readinessProbe:
            httpGet:
              path: /index.html
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5          
            failureThreshold: 1          
          resources:
            {}
            
---
# Source: okteto-enterprise/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "do-okteto-enterprise-mutation-webhook"
  labels:
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "webhook"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        checksum/secrets: 13796ad9748711e9481cf9f26e53612f267b7879f9ae678a0df0edb5bc1b96e9
    spec:
      serviceAccountName: do-okteto-enterprise
      volumes:
        - name: webhook-tls-certs
          secret:
            defaultMode: 420
            secretName: "do-okteto-enterprise-mutation-webhook"
      containers:
        - name: server
          image: "okteto/webhook:1.5.16"
          imagePullPolicy: Always
          ports:
            - name: https
              containerPort: 8443
          env:
            - name: OKTETO_BASE_DOMAIN
              value: "local"
            - name: PORT
              value: "8443"
            - name: OKTETO_SCHEDULE_PODS_BY_PRESSURE
              value: "false"
          volumeMounts:
            - name: webhook-tls-certs
              mountPath: /run/secrets/tls
              readOnly: true
          resources:
            {}
            
---
# Source: okteto-enterprise/templates/telemetry-cronjob.yaml

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "do-okteto-enterprise-telemetry"
  labels:
    app.kubernetes.io/component: "telemetry"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-telemetry"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
spec:
  schedule: "@daily"
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 86400  
      template:
        spec:
          serviceAccountName: do-okteto-enterprise
          restartPolicy: Never
          containers:
            - name: telemetry
              image: "okteto/telemetry:1.1.6"
              imagePullPolicy: Always
              env:
                - name: OKTETO_LICENSE
                  valueFrom:
                    secretKeyRef:
                      name: do-okteto-enterprise
                      key: license
                - name: OKTETO_VERSION
                  value: "0.3.0"
---
# Source: okteto-enterprise/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: do-okteto-enterprise
  labels:
    app.kubernetes.io/name: okteto-enterprise
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/part-of: "okteto"
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - okteto.local
  rules:
    - host: okteto.local
      http:
        paths:
          - path: "/healthz"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/github"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/graphql"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/auth"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/"
            backend:
              serviceName: do-okteto-enterprise-frontend
              servicePort: 8080
    - host: okteto.local
      http:
        paths:
          - path: "/healthz"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/github"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/graphql"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/auth"
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: "/"
            backend:
              serviceName: do-okteto-enterprise-frontend
              servicePort: 8080
---
# Source: okteto-enterprise/templates/certificate.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: do-okteto-enterprise
  labels:
    app.kubernetes.io/part-of: "okteto"
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email:  "admin@example.com"
    privateKeySecretRef:
      name: do-okteto-enterprise-letsencrypt
    solvers: 
    - dns01:
          digitalocean:
            tokenSecretRef:
              name: okteto-dns
              key: key
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
 name: default-ssl-certificate
 labels:
   app.kubernetes.io/part-of: "okteto"
spec:
 secretName: default-ssl-certificate
 issuerRef:
   name: do-okteto-enterprise
   kind: Issuer
 dnsNames:
   - "*.local"

---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: do-cert-manager-webhook
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
  annotations:
    cert-manager.io/inject-ca-from-secret: "okteto/do-cert-manager-webhook-tls"
webhooks:
  - name: webhook.cert-manager.io
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    failurePolicy: Fail
    sideEffects: None
    clientConfig:
      service:
        name: do-cert-manager-webhook
        namespace: "okteto"
        path: /mutate
---
# Source: okteto-enterprise/templates/webhook.yaml


apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: "do-okteto-enterprise-mutation-webhook"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
webhooks:
  - name: ingress.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/ingress"
        namespace: "okteto"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lRS2J4R3p2Y3NuOXhmcUFKVFBQQVNLakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsdmEzUmxkRzh0WTJFd0hoY05NakF3TVRFMU1UY3hNak13V2hjTk16QXdNVEV5TVRjeApNak13V2pBVU1SSXdFQVlEVlFRREV3bHZhM1JsZEc4dFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZ1T2lkajlhenlMdEV5THdIZk05VTFPYnFHZytTOEZCYVpjd0FXMnNrN05OUTBGNGMKdXVkNDVyb1ZzY0R3eTAzck0veFEzZzZ2Uk5pUS95ZVNuOE1NZVJiR09nMXIzNjR2eHdGTldUZHRWaXVjWDFWRgpYOUIyWW04K0w2RW56UW0xRXpaVHJpa0x0UldxMVhuUlQ0VEdmQUdFQWh3VnFFeTBHM2c1RGlaWFFsNjV2ZDRiCk05TmhtOWxYditiOE5qWkJNNm92N1J1eTJoU0hqUjNuOGQzcmFlcy9ETTBQZDNEOXBNQWRNOXNMd0lobjI4cGQKb3plaFlVSFhiakRlQS83WlJ0YUlxeHpiM1B5RTdEaHBnS0E3UTEySnpyOStCQWxVbC9CRnFxUURRT25QQlF4eQpmQUhnT05lVVpVTUFPdW43T29pTzlTVFovK2xsbEc2NGhNK3ZBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFzaFF0Ukhnc2I1dno3TzdPV2tyV204T21aRVorU3RpRQpqT0loclFrSEF2UEhpbUtQTDJyUmVsYzhMR05pTFNPTWFJeEptZ3FQYXBjT2JYamFoS3VqMnNVZFBJbmVydTlvCjkydGJNR2U1dUszYVAwQnNDMGlSN1dqTXhWd3VVeHNvNWRxZnR1YVBMQ0R0MUZlZEREUDh6UUdtMTRabGkvVlUKeHYvV0EvZkxSbWwrTlNMNStLK1pyVGpRam9vdUFHT2E4K2NnZkI3d2hESDl3aWpZbjVaUnJYVXdYOThwdDNYYgp1VjUxcHM0M2V5dFkranNLTFR4NWxTOHl6OXRYbXN5RHkvMndYSkxSQVNmc1UxVm10Njc1dXFRRlZUSWRvaVBLCkNodVM5YXhGVnF4NVIxalJmSUY5QUxreTBlQW9WUWZNQ28ya0dtcWRUaVhwS1dsQTlWM1VCUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    rules:
      - operations: [ "CREATE", "UPDATE" ]
        apiGroups: ["extensions"]
        apiVersions: ["v1beta1"]
        resources: ["ingresses"]
      - operations: [ "CREATE", "UPDATE" ]
        apiGroups: ["networking.k8s.io"]
        apiVersions: ["v1beta1"]
        resources: ["ingresses"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: service.webhook.okteto.com
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/service"
        namespace: "okteto"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lRS2J4R3p2Y3NuOXhmcUFKVFBQQVNLakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsdmEzUmxkRzh0WTJFd0hoY05NakF3TVRFMU1UY3hNak13V2hjTk16QXdNVEV5TVRjeApNak13V2pBVU1SSXdFQVlEVlFRREV3bHZhM1JsZEc4dFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZ1T2lkajlhenlMdEV5THdIZk05VTFPYnFHZytTOEZCYVpjd0FXMnNrN05OUTBGNGMKdXVkNDVyb1ZzY0R3eTAzck0veFEzZzZ2Uk5pUS95ZVNuOE1NZVJiR09nMXIzNjR2eHdGTldUZHRWaXVjWDFWRgpYOUIyWW04K0w2RW56UW0xRXpaVHJpa0x0UldxMVhuUlQ0VEdmQUdFQWh3VnFFeTBHM2c1RGlaWFFsNjV2ZDRiCk05TmhtOWxYditiOE5qWkJNNm92N1J1eTJoU0hqUjNuOGQzcmFlcy9ETTBQZDNEOXBNQWRNOXNMd0lobjI4cGQKb3plaFlVSFhiakRlQS83WlJ0YUlxeHpiM1B5RTdEaHBnS0E3UTEySnpyOStCQWxVbC9CRnFxUURRT25QQlF4eQpmQUhnT05lVVpVTUFPdW43T29pTzlTVFovK2xsbEc2NGhNK3ZBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFzaFF0Ukhnc2I1dno3TzdPV2tyV204T21aRVorU3RpRQpqT0loclFrSEF2UEhpbUtQTDJyUmVsYzhMR05pTFNPTWFJeEptZ3FQYXBjT2JYamFoS3VqMnNVZFBJbmVydTlvCjkydGJNR2U1dUszYVAwQnNDMGlSN1dqTXhWd3VVeHNvNWRxZnR1YVBMQ0R0MUZlZEREUDh6UUdtMTRabGkvVlUKeHYvV0EvZkxSbWwrTlNMNStLK1pyVGpRam9vdUFHT2E4K2NnZkI3d2hESDl3aWpZbjVaUnJYVXdYOThwdDNYYgp1VjUxcHM0M2V5dFkranNLTFR4NWxTOHl6OXRYbXN5RHkvMndYSkxSQVNmc1UxVm10Njc1dXFRRlZUSWRvaVBLCkNodVM5YXhGVnF4NVIxalJmSUY5QUxreTBlQW9WUWZNQ28ya0dtcWRUaVhwS1dsQTlWM1VCUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    rules:
      - operations: [ "CREATE", "UPDATE", "DELETE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["services"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: pod.webhook.okteto.com
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/pod"
        namespace: "okteto"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lRS2J4R3p2Y3NuOXhmcUFKVFBQQVNLakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsdmEzUmxkRzh0WTJFd0hoY05NakF3TVRFMU1UY3hNak13V2hjTk16QXdNVEV5TVRjeApNak13V2pBVU1SSXdFQVlEVlFRREV3bHZhM1JsZEc4dFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZ1T2lkajlhenlMdEV5THdIZk05VTFPYnFHZytTOEZCYVpjd0FXMnNrN05OUTBGNGMKdXVkNDVyb1ZzY0R3eTAzck0veFEzZzZ2Uk5pUS95ZVNuOE1NZVJiR09nMXIzNjR2eHdGTldUZHRWaXVjWDFWRgpYOUIyWW04K0w2RW56UW0xRXpaVHJpa0x0UldxMVhuUlQ0VEdmQUdFQWh3VnFFeTBHM2c1RGlaWFFsNjV2ZDRiCk05TmhtOWxYditiOE5qWkJNNm92N1J1eTJoU0hqUjNuOGQzcmFlcy9ETTBQZDNEOXBNQWRNOXNMd0lobjI4cGQKb3plaFlVSFhiakRlQS83WlJ0YUlxeHpiM1B5RTdEaHBnS0E3UTEySnpyOStCQWxVbC9CRnFxUURRT25QQlF4eQpmQUhnT05lVVpVTUFPdW43T29pTzlTVFovK2xsbEc2NGhNK3ZBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFzaFF0Ukhnc2I1dno3TzdPV2tyV204T21aRVorU3RpRQpqT0loclFrSEF2UEhpbUtQTDJyUmVsYzhMR05pTFNPTWFJeEptZ3FQYXBjT2JYamFoS3VqMnNVZFBJbmVydTlvCjkydGJNR2U1dUszYVAwQnNDMGlSN1dqTXhWd3VVeHNvNWRxZnR1YVBMQ0R0MUZlZEREUDh6UUdtMTRabGkvVlUKeHYvV0EvZkxSbWwrTlNMNStLK1pyVGpRam9vdUFHT2E4K2NnZkI3d2hESDl3aWpZbjVaUnJYVXdYOThwdDNYYgp1VjUxcHM0M2V5dFkranNLTFR4NWxTOHl6OXRYbXN5RHkvMndYSkxSQVNmc1UxVm10Njc1dXFRRlZUSWRvaVBLCkNodVM5YXhGVnF4NVIxalJmSUY5QUxreTBlQW9WUWZNQ28ya0dtcWRUaVhwS1dsQTlWM1VCUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    rules:
      - operations: [ "CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: "do-okteto-enterprise-mutation-webhook"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    helm.sh/chart: okteto-enterprise-0.3.0
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlakNDQW1LZ0F3SUJBZ0lRWSttUWdKWmRMNy81VmxNdGZmanZxVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsdmEzUmxkRzh0WTJFd0hoY05NakF3TVRFMU1UY3hNak13V2hjTk16QXdNVEV5TVRjeApNak13V2pBd01TNHdMQVlEVlFRREV5VmtieTF2YTNSbGRHOHRaVzUwWlhKd2NtbHpaUzF0ZFhSaGRHbHZiaTEzClpXSm9iMjlyTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxWGIrZks0ckxONi8KdXJlRk5kRm9OMU9RSGRuZVB5aUJySzZRdXZvZE9CVDhRSmxUamxuN2VzVk9MWHlpYVpTTlhldk5JZ2twakRDZQoxTzJUTG1yZ2NjdVo4OEFrbCtIUVFlSGk0dlVKRlczOFlVbGlCdXdkVm1CUkF6Q0pSL0w0d0tLWVVLUWpHcENYCmFadXVBUjFuZFAxdzNHVHZDeGMxSkc2QXpIUUg3cWFaQTQ0Q3RpL1RYMS9ySDF6UDZjY2FPaFROVEpwaHVWUEYKbXRpNk03TncrT1RWRVNwZUMvY0Fha3BJUUphVjRBNThCWUV6NzRpU2FnNm0zU0JrN0Rsc3VXQkFyb0J5SzJ2MQpIK05SdXRNT2RaZHRjTjBLVk5ZT1JNOEljYWdhWUl0MDRuQ3d4dUN6SXMyRUlWclBHbG1lLzZhOE5tbnRkUXYwClpUUXF0dXRmaXdJREFRQUJvNEdyTUlHb01BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3IKQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQnBCZ05WSFJFRVlqQmdnaXhrYnkxdgphM1JsZEc4dFpXNTBaWEp3Y21selpTMXRkWFJoZEdsdmJpMTNaV0pvYjI5ckxtOXJkR1YwYjRJd1pHOHRiMnQwClpYUnZMV1Z1ZEdWeWNISnBjMlV0YlhWMFlYUnBiMjR0ZDJWaWFHOXZheTV2YTNSbGRHOHVjM1pqTUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQXQ1KzdtSzF1Q3NJTHFmOEEwNnNKbGZCZ3FjWklacENqVmUreGZvM2pZTU5ZVgpDQTN1ZFNmVDZxUEp6blMyRlRRcHFta0NnU1M3Ty8zYmlhT2t1bWpMUW4yQXgzdzlVNU1rUFRQWTV0ZjF4UkZQCkl2eENCcnMzcFFZb1hUNGhISkhHdW9DSm41YTlSV2tkT0xNSy83L05pUFZscE9UWVo5ZklPRjlHYVlYYWNTUk4KRHNpOVdhdlF5UFgxMGp0VDQ4WU5Jd3Vxa3djM05HNnVCd3ZiRVVjS2xCWkg2MFdzSGhBOE8xQTFBSEpSZVJZdQpzYjJCZEZQSXBxZng4bU8zaGNmUk5Rd28waHpidVNqV3pKRkEwYnBDT2FXTTF0eXZ3elhPN1N0a2JNNEtkdG5qCmM1V2VBTmNhdTAxejZDQ0NOVXA2a05GZ1JKYkxDMVlJSTVKakV3TE4KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcVhiK2ZLNHJMTjYvdXJlRk5kRm9OMU9RSGRuZVB5aUJySzZRdXZvZE9CVDhRSmxUCmpsbjdlc1ZPTFh5aWFaU05YZXZOSWdrcGpEQ2UxTzJUTG1yZ2NjdVo4OEFrbCtIUVFlSGk0dlVKRlczOFlVbGkKQnV3ZFZtQlJBekNKUi9MNHdLS1lVS1FqR3BDWGFadXVBUjFuZFAxdzNHVHZDeGMxSkc2QXpIUUg3cWFaQTQ0Qwp0aS9UWDEvckgxelA2Y2NhT2hUTlRKcGh1VlBGbXRpNk03TncrT1RWRVNwZUMvY0Fha3BJUUphVjRBNThCWUV6Cjc0aVNhZzZtM1NCazdEbHN1V0JBcm9CeUsydjFIK05SdXRNT2RaZHRjTjBLVk5ZT1JNOEljYWdhWUl0MDRuQ3cKeHVDeklzMkVJVnJQR2xtZS82YThObW50ZFF2MFpUUXF0dXRmaXdJREFRQUJBb0lCQUdaSDVyTlQzOFUyTUJ3KwoxY3kwdGlUbWI0NUV4K253eGN0MmxPMzFOWnQ2dHdFNlNYOGFlamtRU3U0VFVtZE0vTUhhSnpaS3QyUGdtSXpGClUxYnB0TXVaNmpKL0h0YjR1Tng2dkpqazhmV1lLNEtBYXdUb2o1QnBrNXZNT0o5UFc2blF1UU82L1dEME1oN1EKa29ZanZDU1ZMd0FtZjB4L1ZsakZ4VUVoS3dSelZ4eUpPQlJUTUsyT1dROWJZNERYdzlvdGU1U1R5clpxM0tBTApoZVE5Y0drbWRpZzJSMXhBbkVjejN1VTIrQjNleFBwc2V0MFhmRkRHTWFCWU84OEsxcFR6WGg3eUhoYXRMalpyCkZ4N285d0U2YXl1MTFzSzA2QmFhZ3RXclhDSjY0eU9SKzVjMy9WZzgrclRmOTZnZTVrMHNjUlBpMWZDcTRGcXEKSm9sQ0J5a0NnWUVBMnVOMGpldkJhR2MxdS9FN1FNYk1nK0dmdzlocTEvQ1NDYXVaWHlxSEEwelhXZjhLM0hBVgp6dG5ZOFkzMDB2YXNmVDBGRnRjeDViSzgyYkErR21lV2dJSUlFTlNQcVFMWU5SUlNPSGVVRVBmdWgxM3p2bFdnCjM3Ukxxa251eHlIT1p6Y3h2Z0xKaU5TM3RUZVJXUi9wUmU5Smgxd0c2Q2V1VGc3Y0ZRVDhEVVVDZ1lFQXhqSmYKelltcnRTcUNvNzRyUmtYNlNxTHRwcFNvNStFWUlPcjBvVnNNZHlmK0I3UDQyR2JHN3VxeG5qR0VMcU9mTUdJZwpqV20zR3RlTCsyOEhXVWtTQmdWOENPMDdhR0NtR1ZrejlPV0JTamkrUDAxeHEveHdtL0FpRWtVUkZJN3RLekQwCjVxNXphZHZNN1dxdDBNUlY5eDIrVGVRZ3NsK0tWcnBwTUY2NGZvOENnWUVBeU1OQ3prRGtQaXdiL3V1OVd5WjcKd3FLWTlQcDAxT2JVSzRaMnYvQ3pzUFV6dUZuU3pta0h0NWZjQVlJZ2diYTZjb3diTk4zZjZEeE9OcVFOOGczOAozcFZsYkhwcDRheTRQY2NMdXJzQzFhVng1RHJxS3pOQ3dLd1BrbnNKUlIvZXZwRERVUEloZ3gwSCtuQ2pJY25CCkhlSGg0UU1wV3BtNnArRzlQcEk1MUxrQ2dZQU0xenFwd0YrbGp5bURubENEYndrMlNMUUk5TnkwbVRyTTl5disKUUQzZ2duRE00dlllWHhwSVpHQTVsWSt3emQwRWIzY1ljbDd3bUVKemVkQUtFdGZlR0FEZk95OThKYmJkTVpCUwpMNFJlNEtwQ3c2dTNydFZFNVJ2di94V0tOWEJjT2dIRDZFMkY4RDJvckI2eXhlV2o2d05uWEg1WjBDTFFWNmQxCkFNNEhOUUtCZ1FDQjhOcmxqZUZnOTYxNnIzYVkyYmE2WkRyYlRGNy9XM3NNQlVUN29kRlJQckhKMVNpbUNVYlQKdEdVN1phaXNsM1k5dCtrVFBkajRPcVAwTXlURktkZiswODJ1cnJaZ0JpUkdTSlJiRFNjUCtoRU5QTG1zVHZXcAp4bGR0bHBDSjA3NmxuaWdWcHlwVXFQWllJOXhtaHRQNDlWbGdSM3hCWGNpaytTZEZPM0dVd3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-psp-clusterrole.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-psp-clusterrolebinding.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-psp.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/psp-clusterrole.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/psp-clusterrolebinding.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/psp.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/servicemonitor.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-psp-clusterrole.yaml
 

---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-psp-clusterrolebinding.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-psp.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/addheaders-configmap.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/clusterrole.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/clusterrolebinding.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/job-createSecret.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/job-patchWebhook.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/psp.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/role.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/rolebinding.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/job-patch/serviceaccount.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/admission-webhooks/validating-webhook.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-daemonset.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-hpa.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-metrics-service.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-prometheusrules.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-psp.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-servicemonitor.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-webhook-service.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-psp.yaml

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-role.yaml

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-rolebinding.yaml

---
# Source: okteto-enterprise/charts/nginx-ingress/templates/proxyheaders-configmap.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/tcp-configmap.yaml


---
# Source: okteto-enterprise/charts/nginx-ingress/templates/udp-configmap.yaml


---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: do-cert-manager-webhook
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: cert-manager-v0.12.0
  annotations:
    cert-manager.io/inject-ca-from-secret: "okteto/do-cert-manager-webhook-tls"
webhooks:
  - name: webhook.cert-manager.io
    namespaceSelector:
      matchExpressions:
      - key: "cert-manager.io/disable-validation"
        operator: "NotIn"
        values:
        - "true"
      - key: "name"
        operator: "NotIn"
        values:
        - okteto
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    failurePolicy: Fail
    sideEffects: None
    clientConfig:
      service:
        name: do-cert-manager-webhook
        namespace: "okteto"
        path: /mutate
